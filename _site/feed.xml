<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Himanshu&#39;s Blog</title>
    <description>I try to figure out things that don&#39;t make sense. Also I write about stuff that I find interesting.
</description>
    <link>http://Hkattelu.github.io/blog/</link>
    <atom:link href="http://Hkattelu.github.io/blog/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Thu, 12 Mar 2020 00:44:00 -0400</pubDate>
    <lastBuildDate>Thu, 12 Mar 2020 00:44:00 -0400</lastBuildDate>
    <generator>Jekyll v3.1.6</generator>
    
      <item>
        <title>My favorite parts of Pittsburgh</title>
        <description>&lt;p&gt;I really didn’t like Pittsburgh when I first got here. I had no friends, and it was nothing like New York, where I spent most of my time in the US. I wasn’t used to not being able to take the subway anywhere. I wasn’t used to having amazing food around me all the time. I wasn’t used to the lack of diversity of the people around me every day. I wasn’t a fan of sports which is what most people in the city do for fun. Like most things in life though, I persisted.&lt;/p&gt;

&lt;p&gt;The primary reason for me being here was work. I spent most of my time at work, and the rest of the time was at home juggling or eating. When I first got here, I did go to all of the “attractions” in pittsburgh - namely the Duquesne Incline and Point state park. Both of them are pretty good places to see, but they aren’t anything compared to what you can see in New york city. Pittsburgh really just didn’t compare at all.&lt;/p&gt;

&lt;p&gt;As I spent more time here, and made a few more friends, I started to see the better side of the burgh. The first thing you notice is that there is a lot more nature around. You can actually go around for a run or on a walk on a sunday morning without being run over by people in a rush walking. You don’t have to walk at the edge of the sidewalks to avoid the huge piles of trash that places leave out which take a long time to get collected. You can actually say hi to anyone at a restaurant and for the most part expect a friendly response. People are generally just happier here and more willing to share that happiness with others.&lt;/p&gt;

&lt;p&gt;That happiness started to penetrate into my daily life. I feel like I enjoy the littler things in life a lot more. Some days I just feel like walking to work to take in the breeze. I really appreciate the times I get to go out with friends to a local concert, or see a local night market in the next neighborhood down. Pittsburgh isn’t the biggest place you think of, but there are a lot of smaller scale events going on all the time in the city.&lt;/p&gt;

&lt;p&gt;Every year I’ve gone to &lt;a href=&quot;https://replayfx.org/&quot;&gt;ReplayFx&lt;/a&gt;, a huge arcade and pinball convention. I go to check out the car show in schenley park. I even go to the Three Rivers Arts festival every year. When I first got here, this all seemed like lame events that would be happening on any old New york weekend - but they’re a big deal here. People from all over Pennsylvania bring in their families and they all have a good time. You can enjoy eating pierogies, fries in sandwiches, or pickles in Pittsburgh without ever having to think twice. It sounds weird, but as I write it it’s very liberating.&lt;/p&gt;

&lt;p&gt;There’s a huge amount of &lt;strong&gt;certainty&lt;/strong&gt; that you get in Pittsburgh that you just don’t get in New York City. If you know me well personally, you would know that I really resented coming to Pittsburgh in this last year. Sitting down and looking at my experiences in retrospect now though, the good parts were really good. At the end of the day, I’m really grateful to a city with objectively less to offer, that is still able to make me a happier person.&lt;/p&gt;
</description>
        <pubDate>Wed, 11 Mar 2020 01:58:00 -0400</pubDate>
        <link>http://Hkattelu.github.io/blog/blog/travel/2020/03/11/My-favorite-parts-of-pittsburgh.html</link>
        <guid isPermaLink="true">http://Hkattelu.github.io/blog/blog/travel/2020/03/11/My-favorite-parts-of-pittsburgh.html</guid>
        
        <category>Travel</category>
        
        
        <category>blog</category>
        
        <category>Travel</category>
        
      </item>
    
      <item>
        <title>I Quit learning flow arts and juggling</title>
        <description>&lt;p&gt;I first started glowsticking in my junior year of high school. I joined the stuy rave club, now known as &lt;a href=&quot;https://www.instagram.com/stuyflow/&quot;&gt;stuy flow&lt;/a&gt;. It took me a really long time to learn even the most basic tricks - the 2 beat and 3 beat weaves.&lt;/p&gt;

&lt;p&gt;To give some context, the 3 beat weave is the go-to glowsticking move that is used as a transition between a LOT of glowsticking tricks, especially for beginners. It also requires you to spin the glowsticks in a sort of hard to understand pattern for beginners, and it often results in a lot of bruises. It took me 2 full weeks of hitting myself, and going to the club nearly every single day after school. At the time, it was the hardest test of raw will power and persistence in my life.&lt;/p&gt;

&lt;p&gt;When I finally learned the move, I was ecstatic. All of the bruises felt like they were for &lt;em&gt;something&lt;/em&gt;, and I had something to show to my friends for the experience I went through. I got to see the smiles of the people who had been with me teaching the move the entire time. It all felt like it was worth it.&lt;/p&gt;

&lt;p&gt;I kept learning new riskier and fancier tricks after that. I practiced to perform at the school-wide shows with the other club members. I became a senior member and started teaching new members who came into the club. I became the director of the next show. I made more friends day by day within the club. I felt like there was a progression in my life not just with glowsticking, but with my life satisfaction. I had more friends and I had actual responsibilities which made me feel like I mattered.&lt;/p&gt;

&lt;p&gt;After I graduated high school, I mostly fell off when it came to practicing glowsticking. Here and there I tried to teach classes in the city, &lt;a href=&quot;https://www.youtube.com/watch?v=sO7O_TAgjdk&quot;&gt;make videos&lt;/a&gt;, or just &lt;a href=&quot;https://www.youtube.com/watch?v=R_zO0LtKzA4&quot;&gt;spin fire poi&lt;/a&gt; with friends. For the most part, though,  I focused on school. The compute science coursework I had in school became the new task I had to focus my persistence and energy on. Glowsticking became more of a stress &lt;a href=&quot;https://www.youtube.com/watch?v=Kkg3-fbGVmY&quot;&gt;relieving hobby&lt;/a&gt; for me. I did also perform at a couple of talent &lt;a href=&quot;https://www.youtube.com/watch?v=UklnUkREowI&quot;&gt;shows to raise money for UNICEF&lt;/a&gt; as well, so it felt like I was using it to give back to the community.&lt;/p&gt;

&lt;p&gt;I graduated in 2018 and have been trying to keep up my glowsticking and flow arts. I’ve transitioned into doing less glowsticking and more poi spinning ( I don’t need to be as flashy, since it’s just for fun ). I bought triple staffs, attended flow festivals like &lt;a href=&quot;https://www.andrew.cmu.edu/user/juggle/festival/&quot;&gt;fluggleburgh&lt;/a&gt; and &lt;a href=&quot;http://kineticfire.org/&quot;&gt;kinetic fire&lt;/a&gt;. I actually got to meet a lot of people in the community, and I’d like to think I made a little bit of a name for myself teaching a class at fluggleburgh and teaching classes at Carnegie mellon university. I also briefly attempted to start up a juggling club at my office in Google Pittsburgh. Flow arts somehow never managed to leave me after all of these years, and my props are sitting in my closet ready to be picked up today.&lt;/p&gt;

&lt;p&gt;But today, I just don’t feel like learning it anymore. I just wrote out a brief history of my experience with flow arts, and chances are if you’re reading this you’ve seen me perform at some point. Maybe you think I’m insanely good and flashy, maybe you think I’m an amateur, or maybe you’re wondering why I even got into this in the first place. The point of this all is that most people only ever get to see the good side of my experience.&lt;/p&gt;

&lt;p&gt;What people don’t see is me practicing in my home or in my room. I attempted to show off this side of myself on instagram for a while. I consistently would post videos of me juggling or participating in challenges. It was meant to give people an insight into what it’s like to practice every day for something. I hoped it would give people a glimpse of the hard part of it, and would hopefully inspire other people to pick up the challenge. I even saw a small growth in my instagram following from all of the videos I posted publicly.&lt;/p&gt;

&lt;p&gt;At a glance, it might seem like this all is working as intended. I’m gaining a following, and my friends get to see me practicing so they appreciate it all, right? Not so.&lt;/p&gt;

&lt;p&gt;There were a lot of stressful unintended consequences of me posting these videos online. First off, when I started posting these videos, I actually had already accumulated a decently sized number of new tricks that I could show off. I was able to sustain putting out new videos and learning new things pretty well. Things started to break down when I was pushing up against the limit of how fast I could learn things.&lt;/p&gt;

&lt;p&gt;For reference, in order to master 3 ball juggling, it takes the average person somewhere around 15-20 hours. I posted one video where I made a montage of me juggling clubs. In order to juggle 3 clubs consistently, expect to take &lt;strong&gt;another 20 hours&lt;/strong&gt;. This meant that every waking moment I had outside of work, I was in between juggling learning sessions at home or at the CMU juggling club. Admittedly, this was pretty fun for a while.&lt;/p&gt;

&lt;p&gt;After a while though, learning juggling becomes &lt;strong&gt;incredibly&lt;/strong&gt; frustrating. Imagine if you had to try some hundreds of times to throw a bunch of things in the air and catch them, and every time you failed, you had to pick them up, focus, and try again. Now imagine doing that for 20+ hours to learn the basic 3 object juggling pattern.&lt;/p&gt;

&lt;p&gt;The problem is that it is just &lt;em&gt;not worth it&lt;/em&gt; for the amount of time and frustration you have to put in. The juggling example is relatable because at some point, most people have at least &lt;em&gt;tried&lt;/em&gt; to juggle. For other more advanced flow arts, it was actually a lot worse that 20 hours because the moves just get more and more nuanced. There are fewer people to teach you, and you have to often go out of your way to festivals or to meetups just to get a routine that will maybe eventually guide you to the trick. This means sacrificing your own personal time with friends, or taking time off of work. Not to mention you don’t have any metric of if you’re doing it right or how long it will take you to finally learn the trick.&lt;/p&gt;

&lt;p&gt;I still spin poi and juggle occasionally, but I quit actively sitting in my room trying to learn crazier and crazier tricks. This doesn’t mean I don’t appreciate the art form as much as I used to - I still watch videos all the time and follow a bunch of spinners on instagram. It just means I want to take the time from learning those would-be moves and put the time and energy into focusing on new hobbies like writing blog posts.&lt;/p&gt;
</description>
        <pubDate>Tue, 10 Mar 2020 01:58:00 -0400</pubDate>
        <link>http://Hkattelu.github.io/blog/blog/flow/2020/03/10/Quitting-juggling-actively.html</link>
        <guid isPermaLink="true">http://Hkattelu.github.io/blog/blog/flow/2020/03/10/Quitting-juggling-actively.html</guid>
        
        <category>Flow</category>
        
        
        <category>blog</category>
        
        <category>Flow</category>
        
      </item>
    
      <item>
        <title>How important is coding fast?</title>
        <description>&lt;p&gt;Every once in a while I find myself in a conversation with a friend about
typing. Sometimes they talk about their typing speeds, sometimes about the
text editors they use, and sometimes even the keyboards they use. As
someone who has to type code for a living, I decided to see what I could
do to optimize my programming before I start my new job. I already knew
that increasing my actually typing speed with practice wasn’t going to
help too much. The best thing to do was to learn a new text editor with a
lot of shortcuts and tricks to make things easier. I wasn’t going to bother
buying a fancy new keyboard because that would cost too much time to learn,
and possibly a lot of money. Then I started to think - what is typing
&lt;em&gt;really&lt;/em&gt; and what’s the best thing I can do.&lt;/p&gt;

&lt;h2&gt;Logging machines&lt;/h2&gt;

&lt;p&gt;Typing is, first and foremost, just a method of logging down your thoughts.
Handwriting and typing have the same purpose, but typing just makes your
thoughts easier to spread and process because it produces digital logs. 
What we’re interested in isn’t necessarily typing fast - we care more about
logging fast. To generalize, think of editors as just a type of logging
machine - a tool that takes inputs (keystrokes) and outputs logs.&lt;/p&gt;

&lt;p&gt;Logging machines don’t have to be editors like Microsoft word, Emacs,
or notepad. A pen and paper are a logging machines with handstrokes as
inputs. A camera is a logging machine with a visible light input.
Even the copy/paste tool is a logging machine that takes highlightable 
text as input. It happens to be that some machines are better
than others at logging down certain thoughts - it would take me a very
long time to log the contents of a 300-page book to another book with
notepad, but I could do it really fast with a printing press. A nice
thing about logging machines is that you can build one thats tailored
to the thoughts you want to log. It (mostly) does not matter what the
thought is.&lt;/p&gt;

&lt;p&gt;It follows that in theory, a machine can only ever log as fast as you 
can think. Keeping that bottleneck in mind, the theoretical optimal editor
doesn’t just let you type inputs as fast as you can think - it also 
interrupts your thinking the least. Additionally, the optimal editor should
not take any time to learn and should be completely intuitive. Basically,
we want to come as close as possible to a machine that literally hooks up
to your brain and puts your thoughts down. While that’s probably never
going to happen, it is interesting to think about all of the properties
of logging machines to better compare them.&lt;/p&gt;

&lt;h2&gt;Things to consider&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Input Complexity - An editor with a lot of inputs is going to not just
require a lot of learning time, but it might also interrupt your thinking
while typing. For example, notepad has few inputs - just the letters on
the keyboard plus a little more. Vim on the otherhand uses a lot of keys
you wouldn’t normally use like ESC and CTRL, and basically has a different
function for every combination of keystrokes imaginable. We would like 
to minimize the number of inputs as much as possible.&lt;/li&gt;
  &lt;li&gt;Input tools - It should be easy to input into a logging machine. It
takes a lot of time to use a mouse (think of the last time you used a 
visual keyboard on your PC), so we want to minimize the time we spend
switching between mouse and keyboard.&lt;/li&gt;
  &lt;li&gt;Generality - If i’m writing a document, my editor needs to be versatile
enough to handle and maybe input images. The ability to handle images
will require additional input complexity, but it will greatly add to 
logging power.&lt;/li&gt;
  &lt;li&gt;Similarity to known machines - It’s generally a lot easier to learn
an editor that is similar something you already know. For example, you
should be able to pick up Google docs pretty fast if you already know
Microsoft word.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;My final choice(s): Vim and Sublime&lt;/h2&gt;

&lt;p&gt;I think that because different editors are better at doing different
things, its natural that I select two different editors for the two
different kinds of programming I do.&lt;/p&gt;

&lt;p&gt;For java, python, and scala programming I use vim.
Despite the fact that it’s complex, it allows you do things all on
the keyboard. No more clicking around to navigate and open files.
Vim is also great because it’s customizable, so I can easily add
shortcuts from other editors that I like - such as the ability to
move lines up and down. Also, vim runs in a terminal which is very
convenient for any sort of writing on a mac or linux. For anyone
interested, by .vimrc is here..&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;colorscheme&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;slate&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;syntax&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;enable&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Enable syntax highlighting&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tabstop&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Tabs are displayed as 2 spaces&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;softtabstop&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Tab actually enters 2 spaces&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expandtab&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Display line numbers&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wildmenu&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Tab completion for files and commands&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lazyredraw&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Update display only when necessary&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;showmatch&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hlsearch&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Highlight all matches when ? or / searching&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;nnoremap&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;J&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v$yddp&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;nnoremap&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;K&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k0v$yddpk&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;nnoremap&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;leader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;space&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nohlsearch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;For HTML, CSS, and Javascript I like to use sublime. The convenient
thing about sublime is that my mouse is already going to be moving
around because I’m testing out website front ends, so I don’t feel
slowed down by using it, and I get the benefits of it like easy
copy/pasting. Sublime also has a great plugin for HTML writing 
called emmet which allows me to create tabs insanely fast without
ever having to type a ‘&amp;lt;’,’&amp;gt;’, or ‘/’.&lt;/p&gt;

&lt;p&gt;I highly recommend both vim and sublime for productivity. Even though
I probably wasted more time researching and learning editors than
I will save, I recommend everyone to go out and try to learn something
new. You might find something new you like.&lt;/p&gt;
</description>
        <pubDate>Sun, 08 Jul 2018 01:58:00 -0400</pubDate>
        <link>http://Hkattelu.github.io/blog/blog/programming/2018/07/08/Programming-Environments-my-vim-setup.html</link>
        <guid isPermaLink="true">http://Hkattelu.github.io/blog/blog/programming/2018/07/08/Programming-Environments-my-vim-setup.html</guid>
        
        <category>Programming</category>
        
        
        <category>blog</category>
        
        <category>Programming</category>
        
      </item>
    
      <item>
        <title>Books I read in the last year</title>
        <description>&lt;p&gt;In the last year I actually ended up reading a few books (no, I don’t
know how I did it either). Here I’m going to list out some important
take away points from each book and what I think about the book overall.
All of the books I read were non-fiction and somehow statistics related
so they actually did have “lessons” in them. Here they go in order:&lt;/p&gt;

&lt;h3&gt;The Signal and the Noise - Nate Silver&lt;/h3&gt;

&lt;p&gt;This book has a good premise. Whenever humans try to make predictions or
forecasts (they are different) they have to base them on some information.
The difficult part of this information is that a lot of it is “noise” that
doesn’t matter or just confuses us. What we need to look for is the “signal”.&lt;/p&gt;

&lt;p&gt;The author makes a lot of cool case studies, such as how we have no idea how to
accurately predict earthquakes but people try to (mistaking noise for signals).
It also brings up the financial crisis and how many companies including the
ratings agencies like moody’s saw it coming but chose to ignore it (ignoring
the signal). It also brings up a cool story about how world champion Garry
Kasparov lost in chess to IBM’s Deep Blue AI. He then talks about statistics
for a while.&lt;/p&gt;

&lt;p&gt;The author’s writing is good too but my problem with the book is that it
doesn’t make clear how to tell signals apart from noise. In fact, all of
the case studies make the comparison in hindsight. For me its a 3/5. I 
recommend it only if you are interested in this sort of stuff abd don’t know
too much about it already.&lt;/p&gt;

&lt;h3&gt;Weapons of Math Destruction: How Big Data Increases Inequality and Threatens
Democracy - Cathy O Neil&lt;/h3&gt;

&lt;p&gt;You would never think that big data and machine learning could actually have
a negative impact on parts of society. That’s the big idea that this book
explores. The case studies that are presented in this book are extremely eye
opening and they highlight the problems of AI and machine learning in our
society.&lt;/p&gt;

&lt;p&gt;If an algorithm is based purely on a lot of data and math, it is probably
right is one of the core ideas. The author notes that while machines help
our society operate more efficiently, the businessmen that use the machines
usually have absolutely no idea when they work. When people come to them to
question the algorithm, they can’t change anything about the algorithms and
the easy reply is to trust the algorithm. It can lead to a vicious cycle.&lt;/p&gt;

&lt;p&gt;One eye opening case study the author points out is how targeted ads are used
to pitch ads for for-profit colleges to poor neighborhoods. These colleges
are about business and the degrees have been shown to be not worth much at all.
Yet the targeted ads keep students going to them, and keeps the people in
those neighborhoods in a vicious cycle of poverty. Another case study was with a
crime prediction software used by the NYPD. Engineers fed decades of crime data
into the machine learning algorithm to make it predict where the next crimes
would most likely occur. It turns out this software keeps police patrolling the
same low-income neighborhoods mentioned earlier. Moreoever since they patrol
those neighborhoods more, they get more crimes there and the machine keeps
telling them to go there. The worst part is no one can question a machine.&lt;/p&gt;

&lt;p&gt;I highly recommend this one especially if you interested in ethics and
big data. The writing was decent, the thing about this book that will keep
you reading is the case studies. I give it a 3.5/5&lt;/p&gt;

&lt;h3&gt;What the Luck? The Surprising Role of Chance in Our Everyday Lives - 
Gary Smith&lt;/h3&gt;

&lt;p&gt;Despite being the book that taught me the least among the rest, I actually
liked this one the most. The writing is very good and the way the author
explains stuff makes a lot of sense.&lt;/p&gt;

&lt;p&gt;The big thing that the author talks about here is called “Regression to the
mean” and he gives a lot of cool examples. My favorite one is this:
Smart women tend to date guys who are not as smart as them. It turns out
that that is a fact. Now it’s easy to say that women like to feel 
intellectually superior or that guys are just not as smart in general but
the author makes a key point. If you are a smart person, you are simply less
likely to meet someone as smart as you. Everything in the book is based on this.
He also talks about some other interesting things like standardized test
grading and air force pilot training, but you can check it out yourself.&lt;/p&gt;

&lt;p&gt;I definitely recommend this book, its worth a read if you want to learn more
about how randomness plays a role in your everyday life. I give it a 4/5.&lt;/p&gt;

&lt;h3&gt;The Black Swan: The Impact of the Highly Improbable - Nassim Taleb&lt;/h3&gt;

&lt;p&gt;This book probably had the most knowledge packed into it, but it also had
some of the most pretentious and hard to understand writing in it as well.&lt;/p&gt;

&lt;p&gt;There is too much in this book to unpack but I’ll explain the title. It turns
out that back in the day during the age of exploration people believed that
all swans were white. They thought so cause they only ever saw white swans.
Until the one day that they did see a black swan and it challenged everything
they thought they know. This book is about those “black swan” events that
no one sees coming. The author characterizes them, describes when they show up,
and what kind of impact they could have.&lt;/p&gt;

&lt;p&gt;If you’re looking for a good read don’t bother with this. If really you want to 
gain some knowledge about how uncertainty takes form and shapes events in 
the world, check this book out. I give it a 3.5/5.&lt;/p&gt;
</description>
        <pubDate>Wed, 20 Jun 2018 01:58:00 -0400</pubDate>
        <link>http://Hkattelu.github.io/blog/blog/books/2018/06/20/Books-I-read-in-the-last-year.html</link>
        <guid isPermaLink="true">http://Hkattelu.github.io/blog/blog/books/2018/06/20/Books-I-read-in-the-last-year.html</guid>
        
        <category>Books</category>
        
        
        <category>blog</category>
        
        <category>Books</category>
        
      </item>
    
      <item>
        <title>My most useful git tips and tricks</title>
        <description>&lt;p&gt;Most people see git as a nuisance when they first learn about it in school.
There are a lot of commands to learn. Fetch, clone, push, commit, add, reset,
stash, and so on. What I did when I first started is just learned the bare
minimum of the commands I needed to know. Clone to download the repo,
add to add changes, commit to persist changes, and push to push changes to
the repository on github. It became a cycle -&lt;/p&gt;

&lt;p&gt;(1) git add .&lt;/p&gt;

&lt;p&gt;(2) git commit -m “Brief commit message”&lt;/p&gt;

&lt;p&gt;and occasionally,&lt;/p&gt;

&lt;p&gt;(3) git pull&lt;/p&gt;

&lt;p&gt;After all, for most projects (especially solo ones) that’s all you need.
The truth is each one of these has caused me a lot of problems before.
In this post i’m going to outline the problem and then put a better solution
to use for each one. Trust me, it’ll save you a lot of time and headache
if you follow this post.&lt;/p&gt;

&lt;h3&gt;git add .&lt;/h3&gt;

&lt;p&gt;The problem with this command is that it adds every change to your list of
staged changes. Isn’t that what you always want anyway? Not always. When it
comes to group work this single command can waste hours of time if one person
accidentally pushes a set of cached files or IDE settings. For example, if
I push my eclipse settings which link to JRE8 and my coworker who pulls it
has JRE9, it will break their program. It’ll also take a while for them to find
the error because the commit message will say something like “Added this 
feature to this module”, but it’s neither the module nor the feature that
caused him the error in reality. The only giveaway that it’s a setting will
be that the code works on your computer but not theirs.&lt;/p&gt;

&lt;p&gt;How can we get around this? You might think to just add the settings folders
to your .gitignore but even then you might stage accidental changes. The only
good way to do this is to take your time to manually add the files you want
to add. &lt;em&gt;git status&lt;/em&gt; will tell you a list of unstaged changes and you can
just go through them and add them individually. This may seem like a lot of
work, but if you are commiting in proper increments you should only be adding
a few files at once.&lt;/p&gt;

&lt;h3&gt;git commit -m &lt;/h3&gt;

&lt;p&gt;This one seems like a really good command at first. You get to input a 
brief but descriptive commit message, commit all the changes you staged, and
do it easily in one command. The problem is that the commit message that
git automatically generates for you is probably better. It includes all
the files that were changed (for debugging) and all you have to do is get
rid of the ‘#’s to uncomment them&lt;/p&gt;

&lt;p&gt;You can combine this one with the add in the last one using a command
thats in the more updated versions of git called &lt;em&gt;git commit -p&lt;/em&gt;. This great
command actually automatically loops through every file change and asks if
you want to add and commit it or not. If you master it and the shortcut,
you can add and commit every file change in seconds, and without making the
mistakes I mentioned earlier.&lt;/p&gt;

&lt;h3&gt;git pull&lt;/h3&gt;

&lt;p&gt;The problem with git pull when you work in a team is that it usually will
try to do a merge and then force you to resolve conflicts yourself. 99% of the
time what you really would like it to do is pull their changes and then 
put your changes on top of them (usually will avoid merge conflicts) and
is what you want. You can accomplish this by using git fetch to pull the changes
on the remote branches. Then, you can git rebase to move your changes on top
of their branch, avoid marge problems and keeping your tree clean of MERGE
commit messages. This will also make is so you don’t accidentally resolve
the merge conflicts incorrectly and introduce more problems.&lt;/p&gt;

&lt;p&gt;There you have it. A few new git commands that will help you improve your
productivity in development. If you thought any of this was helpful, or if
you know any better commands, please feel free to shoot me an e-mail or message.&lt;/p&gt;
</description>
        <pubDate>Thu, 10 May 2018 01:58:00 -0400</pubDate>
        <link>http://Hkattelu.github.io/blog/blog/programming/2018/05/10/The-most-useful-git-tips-and-tricks.html</link>
        <guid isPermaLink="true">http://Hkattelu.github.io/blog/blog/programming/2018/05/10/The-most-useful-git-tips-and-tricks.html</guid>
        
        <category>Programming</category>
        
        
        <category>blog</category>
        
        <category>Programming</category>
        
      </item>
    
      <item>
        <title>How to learn coding without losing motivation</title>
        <description>&lt;p&gt;Sometimes my friends ask me, “How long would it take for me to learn python?” or “Where do I start coding
to get a job?”. I tell them that if they pick a language and stick to it, then maybe work on a project or two,
they will be well on their way to being a capable programmer. Then, they might ask me some follow-ups like
“How exactly do I start? What should I download? Where are tutorials?” and I will point them in the right direction.
I then go about my life as usual and then check on them a week later. What happens?&lt;/p&gt;

&lt;p&gt;They’ve given up! I’m so confused! How could it be that my friend was so excited to learn about programming but quit so
quickly? The process of obtaining the software wasn’t hard (These days, sites like codecademy let you type code on the web),
the beginner code couldn’t have been too hard either, so what went wrong? I ask them what went wrong and usually it’s
something along the lines of “I didn’t have enough motivation” or “I just stopped after a day”. I stop and think about
it for a while.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://nec1908.com/wp-content/uploads/2015/07/11051772_10153177278493893_8339865091411561609_n.jpg&quot; alt=&quot;Motivate&quot; height=&quot;300px&quot; width=&quot;300px&quot; text-align=&quot;center&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Sure, it makes sense. My friends wanted to learn, but after a shoft while lost motivation even after they started. But
this brings up an interesting question. How is it possible for you to learn how to code on your own if you keep losing 
motivation? The reality is that there is no way to magically keep a steady supply of motivation for you to learn, so
what can we do? You hear stories about 16-year old geniuses starting companies with code they wrote from when they were
accepted to MIT at 13 because they learned at age 9. But where do those people start?&lt;/p&gt;

&lt;p&gt;To answer this question, we first need to look at some of the other underlying reasons why it’s hard to code without
motivation.&lt;/p&gt;

&lt;h3&gt; It isn&#39;t fun &lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;http://www.richstoner.com/wp-content/uploads/2014/07/shutterstock_52649824-e1418935346529.jpg&quot; alt=&quot;Basketball&quot; height=&quot;300px&quot; width=&quot;300px&quot; text-align=&quot;center&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Compare coding to a hobby such as basketball. How come there are people so excited to go out to the courts to play and learn to
play ball or watch it on TV? The obvious difference is that basketball is (for many people) actually a lot of fun even if you
are just learning. You can still play with other people who are just starting out, and you will have a good time. When you code,
it’s typically alone in front of an IDE or some tutorial. When you remove that fun aspect, your incentive to learn drops 
&lt;em&gt;dramatically&lt;/em&gt;. This is no surprise, but what can we do about it? Well some sites like CodeFights have tried to fix this by
turning coding into a game, but generally this won’t work. One possible way to fix this is to get a group of friends to learn
with you. The addition of other people could add a competitive element to your learning which might make it more enjoyable.
However, don’t let another person’s success demotivate you. This leads me to my next point.&lt;/p&gt;

&lt;h3&gt; Failure is unavoidable &lt;/h3&gt;

&lt;p&gt;I understood programming very quickly and was able to get my first project full up and running in less than an hour thanks
to the tutorial - said no one ever. One thing that all beginners &lt;em&gt;have&lt;/em&gt; to understand is that there is literally &lt;em&gt;no&lt;/em&gt; &lt;em&gt;one&lt;/em&gt;
who thinks programming a project is easy. Ask any professional with years of experience and they will tell you just how much
they struggled. I myself took 2 hours just to get my first “Hello World” program up and running because the tutorial didn’t tell
me how to fix the compiler errors. When I was making this blog none of the posts would show up because the dates were in the 
future. When I made my first website I didn’t realize you had to link your css file in your html header and wondered why nothing
was working. And all of this is not even the tip of the iceberg. If you are in a group of programmers and they talk about 
some complicated project they are working on, you cannot let this demotivate you a single bit. Instead, think about how much
they failed to get to where they are, and realize that you can do it too no matter how many road blocks you face in the moment.&lt;/p&gt;

&lt;h3&gt; Lack of (Immediate) reward &lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;http://cdn.webfail.com/upl/img/f8454067544/post2.jpg&quot; alt=&quot;Snowmen&quot; height=&quot;300px&quot; width=&quot;300px&quot; text-align=&quot;center&quot; /&gt;&lt;/p&gt;

&lt;p&gt;There is a pretty big gap in what a programmer does when he is a professional, and what he does when he is a beginner. Many 
beginners have to realize that the process of learning cannot happen over a week, a month, or even a year. You might want to 
get your big automated mobile app website function compiler running as soon as possible, but you can’t do it without learning
what a for loop is. Typically, once you learn how to print “Hello World”, you are not impressed. In basketball it is fun to make
your first shot slam against the backboard and whoosh into the net. In programming, you are greeted with text on a screen. If 
you are fast, you might be greeted with an image on the screen in a few days. The point is, you aren’t really immediately 
rewarded for your coding efforts, and your brain sees that and decides to become demotivated. After all, why would you do 
something if there is no positive reinforcement in it for you? An easy solution to this is to simply reward yourself everytime
you hit a milestone. When you learn the basics of a language go out for dinner, when you understand how pointers work go ice
skating, when you make your first website go get a massage. It’s a simple idea that can go a long way in keeping you focused.&lt;/p&gt;

&lt;h3&gt; Start a project &lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;http://betamore.com/wp-content/uploads/2016/01/Learn-to-Code.png&quot; alt=&quot;Website&quot; height=&quot;300px&quot; width=&quot;300px&quot; text-align=&quot;center&quot; /&gt;&lt;/p&gt;

&lt;p&gt;A beginner might be tempted to do another tutorial after they finished the first one if they do not feel like they learned 
enough. To this I say, no. As soon as you finish your tutorials on a subject, I say you should jump right into a project. The 
main reason is that once you’ve started on something, you will typically feel uneasy if you let it go unfinished. As a result, 
you have a much bigger incentive to return to coding once you’ve lost your motivation. This will also teach you good future 
habits such as googling/using stack overflow if you don’t know how to solve a problem. In the end, you will eventually finish
you project and give you something to be proud of.&lt;/p&gt;

&lt;h3&gt; Keep a portfolio &lt;/h3&gt;

&lt;p&gt;It’s a good idea to keep a portfolio of all projects you’ve ever completed because it becomes a great go-to source of 
motivation. To this day I feel an urge to program every time I look at my github repositories. It lets me look back at my
work and say “Wow, I remember when I solved X with Y. I should’ve used Z instead”. It also gives you a more tangible 
reward for all of the work you put into learning.&lt;/p&gt;

&lt;h3&gt; Spend time with other programmers &lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;http://2.bp.blogspot.com/_uSnS-YBGEtY/TKRVSv7z7HI/AAAAAAAAAUs/Vkf31yzPejs/s1600/s7.jpg&quot; alt=&quot;People&quot; height=&quot;300px&quot; width=&quot;300px&quot; text-align=&quot;center&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If you want to learn programming, surround yourself with it. In fact, it is crucial in learning anything to surround yourself
with people who are way better than you. When you’re surrounded with programmers and you really want to learn, you will see
it for yourself. You will observe the way they solve problems, the way they stick to their work through hardship, the way
they read documentation, and even the way they carry themselves in their daily life. When surrounded by people smarter than
you, you can only get better. To this day I still look around me and see people who are better, and it makes me want to strive
to become the best programmer I can be. It’s hard at times being the worst at something in the room, but find happiness in
the fact that there is no where to go but up if you do this.&lt;/p&gt;

&lt;p&gt;At the end of the day, you can have all the motivation in the world and still not be able to learn to code. At times like this
its important to check with yourself: Why do I really want to learn to code? Do I even want to learn that badly? Because you
will never be able to learn to do something if you don’t genuinely want to do it.&lt;/p&gt;
</description>
        <pubDate>Thu, 05 Jan 2017 00:58:00 -0500</pubDate>
        <link>http://Hkattelu.github.io/blog/blog/personal/2017/01/05/How-to-learn-coding-without-losing-motivation.html</link>
        <guid isPermaLink="true">http://Hkattelu.github.io/blog/blog/personal/2017/01/05/How-to-learn-coding-without-losing-motivation.html</guid>
        
        <category>Personal</category>
        
        
        <category>blog</category>
        
        <category>Personal</category>
        
      </item>
    
      <item>
        <title>Transfer Protocols</title>
        <description>&lt;p&gt;In a world where the internet is becoming an increasingly 
integral part of our lives, the need for secure information 
transfer is greater than ever. On the web, information is 
transferred mainly through two protocols – HTTP (HyperText 
Transfer Protocol) and HTTPS (Secure). You have 
definitely seen both of these in your browser URL box, but 
what do they actually mean and how do they work? To answer 
those questions, we have to go into detail.&lt;/p&gt;

&lt;h4&gt;Transfer Protocols&lt;/h4&gt;

&lt;p&gt;The concept of a transfer protocol is simple. How can the 
client and server transfer information securely. By secure,
I mean that transfer must ideally:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Not be able to be intercepted&lt;/li&gt;
  &lt;li&gt;Only be understood by the proper parties&lt;/li&gt;
  &lt;li&gt;Not require prior contact between the parties&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can see secure transfers outside of the internet in 
many places. For example, the US postal service mails items
in trucks so that other people can’t just steal your mail. 
Additionally, the only thing that the mailer’s must know 
about eachother is their addresses. They don’t have to 
agree on a envelope size, color, or even the postal service 
to use.&lt;/p&gt;

&lt;p&gt;This isn’t anything new, Julius Caesar also used to send out 
letters to his allies. However, they didn’t have armored 
trucks back then, so he settled for a very primitive form of 
encryption known today as the Caesar cipher. Basically, he 
would “encrypt” his messages by shifting the letters of the 
alphabet a certain number of times. This way, even if an 
attacker intercepted the letter,they wouldn’t be able to 
decrypt it and understand it. Sounds good right? Almost. The 
only problem with this is that Caesar would have to 
communicate the number of times to shift the alphabet to his 
allies &lt;strong&gt;before&lt;/strong&gt; the letter is sent out. It sucks for 
Caesar, but this isn’t a problem in the modern day. HTTP and 
HTTPS are vastly more advanced, but at the core they follow 
the exact same concepts.&lt;/p&gt;

&lt;h4&gt;HTTP&lt;/h4&gt;

&lt;p&gt;HTTP is a protocol that specifies the format of the HTTP
request, which allows for information to be sent between client
and server. HTTP requests are typically sent over port 80, but
can be done over any port.&lt;/p&gt;

&lt;p&gt;The format is as follows:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;“HTTP://”&lt;/li&gt;
  &lt;li&gt;The url of the host domain (EX: www.hkattelu.github.io)&lt;/li&gt;
  &lt;li&gt;The path to the resource (EX: /blog)&lt;/li&gt;
  &lt;li&gt;Query string to search (EX: ?date=9.02.16)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This tells the server to return the resource at the path /blog
that fulfills the query string’s requirement. If there is no
resource or query string, the server will typically return
the index.html file to client. The query string can also specify
a POST or DELETE request which is meant to edit the resources of
the server.&lt;/p&gt;

&lt;p&gt;HTTP provides a solid interface for fast client-server interaction, but
there is a problem. It is entirely possible for a middle man to
intercept the requests and edit them for their own purposes. This can
lead to bad things if the request contained sensitive information
such as passwords, credit card information, or even a social security
number. The attacker could also edit the request to attack the information
of the server with a POST or DELETE request.&lt;/p&gt;

&lt;h4&gt;HTTPS&lt;/h4&gt;

&lt;p&gt;HTTPS is almost identical to HTTP from the user’s perspective, but
there is much more going on that is abstracted from the user. There
are only three perceived differences are that the URL contains an “HTTPS”
instead of “HTTP”, that the request usually takes longer to process, and
that the HTTPS URLS use port 443 instead of port 80 by default.
Under the hood, HTTPS is a very secure transfer that makes it nearly
impossible for an attacker to target a connection. The process is as 
follows:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;The client and server agree on an encryption algorithm and SSL (Secure Socket Layer) version&lt;/li&gt;
  &lt;li&gt;The server sends a certificate to a trusted 3rd party to identify itself and obtain a certificate public key&lt;/li&gt;
  &lt;li&gt;The client uses its public key to encrypt the message and sends it to the server&lt;/li&gt;
  &lt;li&gt;The server uses its private key to decrypt the message and understand it&lt;/li&gt;
  &lt;li&gt;Both client and server now know eachothers keys and can send further messages securely&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This is somewhat oversimplified, so I’ll explain more.&lt;/p&gt;

&lt;p&gt;In the first step, the SSL is an interface that allow for encrypted communications through sockets. It is
the link that messages will go through.&lt;/p&gt;

&lt;p&gt;The second step is essentially a verification step. The server must send a certificate to a 3rd party
to verify that it is legit. The certificate will usually include the details of the website like domain name,
and the business registry info. It also includes a digital signature which truly verifies it. For example,
you can claim to be chase bank to steal credit card information, but you cannot verify yourself without the
digital signature. After the verification, the public key is obtained&lt;/p&gt;

&lt;p&gt;In the following steps, there is an exchange of “keys”. Basically, a public key is the key that you share with others
and you use it to encrypt data. The private key is the one you keep to yourself to decrypt incoming messages.
The benefit of this two key system is that even if a middle man intercepts your messages, he
cannot decrypt them or make any sense of them without the private key (which is never shared). This 
allows for a secure communication between only the client and server.&lt;/p&gt;

&lt;p&gt;Keep in mind that although this HTTPS is vastly more secure, it comes at the cost of time. In most
cases the time for the transactions to occur is negligible, but it is still worth mentioning.&lt;/p&gt;

&lt;p&gt;Those are the basics of internet transfer protocols. I hoped this post helped you learn something new
or clarify any existing problems.&lt;/p&gt;
</description>
        <pubDate>Sat, 03 Sep 2016 23:03:00 -0400</pubDate>
        <link>http://Hkattelu.github.io/blog/blog/web/2016/09/03/Transfer-Protocols.html</link>
        <guid isPermaLink="true">http://Hkattelu.github.io/blog/blog/web/2016/09/03/Transfer-Protocols.html</guid>
        
        <category>Web</category>
        
        
        <category>blog</category>
        
        <category>Web</category>
        
      </item>
    
      <item>
        <title>My top 5 places to go in NYC</title>
        <description>&lt;p&gt;When you’ve lived in queens for years and went to high school in manhattan you eventually
run out of things to do, even in the big apple. Sure, new stores open and new trendy hangout
spots pop up, but for the most part it’s the same thing. It’s not a bad thing, but I always
end up asking myself if it’s worth it anymore to visit Vanessa’s in chinatown or Gong Cha
in midtown. Despite this, there are a few spots in NYC that I never get tired of visiting.
They’re almost always fun or beautiful, no matter how many times I go. Here they are (in 
no particular order):&lt;/p&gt;

&lt;h4&gt;Washington Square Park&lt;/h4&gt;

&lt;p&gt;I come here often to visit friends at NYU or just to hang out with the NYU circus arts club.
Even in the winter this place is always bustling with people. The fountain, the arch, the statues,
and even the “pigeon man” all make this spot memorable. There’s always something going on whether it
be yoga in the grass, musicians playing on their instruments, or the chess players in the corners.
On top of being a beautiful spot overall, it’s also close by other notable spots like the Uncommons
(board game cafe).&lt;/p&gt;

&lt;h4&gt;Battery park&lt;/h4&gt;

&lt;p&gt;The best part about battery park is that it’s by the hudson river. I used to come here after school
to play frisbee with friends. Despite being on this list, it really is just a park. Most of the people
here are either kids who just got out of school or parent’s taking their kids out on walks. The typical
scenery consists of boats sailing across the river, people lying down to tan themselves, and guys
playing handball and basketball. I don’t make it sound like much, but my writing can’t do the 
beauty of this place justice. On top of it all, this place is riddled with statues, has a movie theater 
nearby, lots of places to eat, and there’s a free kayaking spot at Pier 26 nearby.&lt;/p&gt;

&lt;h4&gt;Central Park&lt;/h4&gt;

&lt;p&gt;Arguably the most famous place on this list, Central park’s beauty comes from its sheer size. I’ve
been here about ten times, but still don’t think I’ve even come close to seeing all that it has to offer.
To put it plainly, every visit to central park is a completely new experience. The only downside I can
think of is that it can take a long time to get out of here, so make sure you bring food and water.&lt;/p&gt;

&lt;h4&gt;The Highline&lt;/h4&gt;

&lt;p&gt;The Highline is an old and defunct train track turned into a park above the streets. In theory, you could see 
everything it has to offer in one straight walk. But the truth is that it’s such an active place that no
two visits are really the same. There are many events for all ages held here, and tons of nearby restaurants
in bustling downtown manhattan. But the true beauty of the highline doesn’t come from the place itself – but
rather its surroundings. Walking the highline gives you a novel perspective of the city and its buildings
unlike anything else. The buildings, billboards, and graffiti are what truly make this place shine.&lt;/p&gt;

&lt;h4&gt;Roosevelt Island&lt;/h4&gt;

&lt;p&gt;Roosevelt island, put simply, is one of the nicest places in the city. Compared to the other places on this 
list, it has almost nothing. It is simply a small island with a lot of parks. There are a few sites to see like the 
gondola to manhattan and the stone engravings at the end of island. For the most part though, it is just a
really nice place surrounded by water. In a city where vehicle noise is almost everywhere, the serene sounds of the 
water beating against the rocks makes this one of my favorite places to be.&lt;/p&gt;

&lt;p&gt;Those are my top 5 spots in NYC. If I had to give any honorable mentions, they would 
go to Governor’s Island (great place to bike, but it’s only open in the summer), and 
Brooklyn Bridge (nighttime walks on the bridge are arguably the most beautiful thing
in the city, and that’s not even mentioning the DUMBO area). The next time you want
to hang out with some friends and need a place to go, look no further. If you’re just 
a visitor in the city, make sure to check all of these places out. You won’t be 
disappointed.&lt;/p&gt;
</description>
        <pubDate>Sun, 07 Aug 2016 22:02:00 -0400</pubDate>
        <link>http://Hkattelu.github.io/blog/blog/travel/2016/08/07/My-top-5-places-to-go-in-NYC.html</link>
        <guid isPermaLink="true">http://Hkattelu.github.io/blog/blog/travel/2016/08/07/My-top-5-places-to-go-in-NYC.html</guid>
        
        <category>Travel</category>
        
        
        <category>blog</category>
        
        <category>Travel</category>
        
      </item>
    
      <item>
        <title>Should you go to a hackathon?</title>
        <description>&lt;p&gt;About twice a semester I’ll go to a hackathon as a break from school to
visit a new place, make some new friends, and see some familiar faces. What?
Aren’t hackathons for making projects? Aren’t you going to be busy
coding non-stop for 24 hours? Don’t you want to win a prize or
build the next big app? The answer is a resounding no.&lt;/p&gt;

&lt;p&gt;I’ve heard of a few myths about hackathons from friends and around the internet
in the past couple of months, and a couple of them, in my opinion, are true. The
majority of them are not. I’m going to get right into it and address three big ones in the
following:&lt;/p&gt;

&lt;h3&gt;You need to build a project&lt;/h3&gt;

&lt;p&gt;This is the most common one and also the least true. I’ve been to seven hackathons since I
first got to college and I didn’t even know how to declare a variable at the first two. For
the next five, I either didn’t make anything or made a dirty mash up of code which I didn’t
feel proud of. Does that mean I shouldn’t have gone to those hackathons? Not at all. In fact,
I don’t think I would even be writing this blog post if I didn’t go to those.&lt;/p&gt;

&lt;p&gt;The biggest reason would be that I just would not have learned as much. You should have two
goals in mind when going to a hackathon:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;To learn something new&lt;/li&gt;
  &lt;li&gt;To meet people&lt;/li&gt;
  &lt;li&gt;To have a good time&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;But isn’t the whole point of a hackathon to build a project? No, let me explain.
I can almost guarantee that at your first hackathon you will not be able to make a project
or even come close. The basic programming skills that schools teach are good and are necessary
fundamentals, but they will not teach you enough to make an award-winning project. Instead,
you should focus on learning a new technology whether it be a framework or a language. You could
do this by asking people, or by making a mini project, but there is no better environment for
learning than being surrounded by people who are smarter than you.&lt;/p&gt;

&lt;p&gt;For the same reason, you should be meeting people because they will (hopefully) inspire you. 
For me, seeing people who were so much smarter than me made me want to learn more. On top of that,
you get to meet new and interesting people who will make you feel more at home in the hackathon 
scene. If you attend a hackathon away from your schools, you should try to have a good time so that
you don’t regret spending your weekend away from home. You should only be trying to build a project
if you are confident in your abilities and feel like you have a strong team. In that case, you can
focus on that project instead of learning new stuff (don’t forget to sleep though).&lt;/p&gt;

&lt;h3&gt;You need a team&lt;/h3&gt;

&lt;p&gt;It can be a lot of fun to go to a hackathon and code with your friends. If you can’t gather enough
friends, then going to a hackathon alone isn’t necessarily a bad thing. Every single hackathon I’ve
been to has had a team-building period where you can either start a team on your own or join an existing one.
You will probably meet a good team, but even if you don’t it isn’t a big deal. You could just
leave if it is too much of a hassle for you, and spend the time working on your own thing. It might seem
like a rude thing to do, but the team can find another person. I had a bad experience forming a team of
random people once and I only wish I had left the team sooner. Remember, you should be having a good time.&lt;/p&gt;

&lt;h3&gt;Hackathons are competitive&lt;/h3&gt;

&lt;p&gt;Admittedly, there are a few hackathon-goers that are fighting to be the next
Zuckerburg. The vast majority of them, though, are not. You can go up
to any team at a hackathon and ask them for help and I can say with almost 100% certainty
that they will go out of their way to help you. The hackathon community is not only
really helpful towards newbies, but it’s also full of extremely intelligent and experienced people
who have faced struggles of their own. Sometimes they can be weird, sometimes they can be
narcissists, and sometimes they can be frustrated, but they will almost always be helpful.&lt;/p&gt;

&lt;h2&gt;So What?&lt;/h2&gt;

&lt;p&gt;I personally think that you should give hackathons at least two tries: one where you go without a full team,
and one where you go with a full time. If you didn’t enjoy either of those, then maybe hackathons aren’t for you.
For everyone else, I wholeheartedly encourage you to step out of your comfort zone and sign up for a hackathon
as soon as possible, even if you know nothing about coding. You’ll have fun and hopefully gain some coding experience
under your belt as well.&lt;/p&gt;
</description>
        <pubDate>Thu, 21 Jul 2016 12:44:00 -0400</pubDate>
        <link>http://Hkattelu.github.io/blog/blog/other/2016/07/21/Should-you-go-to-a-hackathon.html</link>
        <guid isPermaLink="true">http://Hkattelu.github.io/blog/blog/other/2016/07/21/Should-you-go-to-a-hackathon.html</guid>
        
        <category>Other</category>
        
        
        <category>blog</category>
        
        <category>Other</category>
        
      </item>
    
      <item>
        <title>Why I study computer science</title>
        <description>&lt;p&gt;When I first started applying to colleges in late 2013, I had no idea what I wanted
to major in. It was a big decision, for most people their college major was what they
ended up doing for the rest of their life. I wasn’t ready to make that decision (and I’m
still not) so I spent a lot of time thinking. People always say to do what you’re good at, and
I was good at one thing – Math.&lt;/p&gt;

&lt;p&gt;That narrowed down the options. I was considering some sort of science or engineering degree.
Thinking about the types of classes I was taking at the time, I narrowed the results down
even further. After considering the job market, I narrowed it all down to one option : Electrical
Engineering.&lt;/p&gt;

&lt;p&gt;Electrical Engineering? But you’re a computer science major! Hold on, the story isn’t over yet.
While I was pretty set on electrical engineering I was also considering applied math or even physics.
At the time, I had only ever coded in a functional programming language called scheme in a mandatory
CS class my sophomore year of high school. I had little to no interest in it, especially considering my lack of
experience.&lt;/p&gt;

&lt;p&gt;My idea of computer science at the time : &lt;img src=&quot;http://www.gampmedia.com/wp-content/gallery/The-great-benefits-of-choosing-bespoke-software-pictures/Steps-to-finding-the-best-software-development-company.jpg&quot; alt=&quot;Picture&quot; height=&quot;400px&quot; width=&quot;600px&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I ended up choosing Stony brook university, a school known for its computer science program. I
was still set on electrical engineering, but what changed my mind was my acceptance into an 
honors program for computer science. I decided that I would try it out for a semester, and if
I didn’t like it then I would switch to electrical.&lt;/p&gt;

&lt;p&gt;You can tell by now that I ended up liking it, but why? As I took classes I slowly began to
realize that CS wasn’t really like math in the way that many people make it out to be. Sure,
a lot of data structures and algorithms are based on mathematical principles, but what many
people in the industry do is unrelated to that. There is enough software around that developers
don’t really have to think that much about what’s going on underneath the computer’s hood.
Usually the most someone will have to do is implement their own data structure based on an existing one.&lt;/p&gt;

&lt;p&gt;That doesn’t mean the whole computer science field is mundane though. I just think that 
“software engineering” is a more apt name for the degree because most classes focus on the
tools and thinking necessary to build efficient software. Don’t get me wrong, I do like building
software with code, but it’s not what attracted me to the field. What I really like about CS is the
problem solving aspect. Whether it be learning a new technology or getting my algorithms to be
more efficient, I always have to think deeply.&lt;/p&gt;

&lt;p&gt;Anyone who has ever made something with code knows that obstacles arrive more often than they’d
like to admit. Overcoming those obstacles gives me a sense of achievement that I don’t think
you can find in any other field. It’s tiring at times to always be wrestling with the compiler
or the layout engine, but the rush of figuring it all out makes the effort worth it.&lt;/p&gt;
</description>
        <pubDate>Tue, 12 Jul 2016 01:13:00 -0400</pubDate>
        <link>http://Hkattelu.github.io/blog/blog/personal/2016/07/12/Why-I-study-computer-science.html</link>
        <guid isPermaLink="true">http://Hkattelu.github.io/blog/blog/personal/2016/07/12/Why-I-study-computer-science.html</guid>
        
        <category>Personal</category>
        
        
        <category>blog</category>
        
        <category>Personal</category>
        
      </item>
    
  </channel>
</rss>
